{
	"name": "cosmosLoad",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synspjarvisprd",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fe9afe2c-a645-476f-b39a-a3243a4275b3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "scala"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/71cc41f4-8e37-4c60-abbb-b9003b91c554/resourceGroups/rg-jarvis-production/providers/Microsoft.Synapse/workspaces/syn-tlf-jarvis-prod/bigDataPools/synspjarvisprd",
				"name": "synspjarvisprd",
				"type": "Spark",
				"endpoint": "https://syn-tlf-jarvis-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synspjarvisprd",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"import org.apache.spark.sql.functions.{col, concat, date_format, lit, to_timestamp, regexp_replace, when}\r\n",
					"import org.apache.spark.sql.DataFrame"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"val akv = \"kv-tlf-jarvis-prod\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  def strToMap(str: String): Map[String, String] = {\r\n",
					"    str.drop(1).dropRight(1)\r\n",
					"      .split(\",\")\r\n",
					"      .map { pair =>\r\n",
					"        val Array(k, v) = pair.split(\"=\")\r\n",
					"        k.trim -> v\r\n",
					"      }.toMap\r\n",
					"  }"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  def strToArray(str: String): Map[String, Array[String]] = {\r\n",
					"    str.drop(1).dropRight(1)\r\n",
					"      .split(\",\")\r\n",
					"      .map { pair =>\r\n",
					"        val Array(k, v) = pair.split(\"=\")\r\n",
					"        k.trim -> v.replace(\" \",\"\")\r\n",
					"          .split(\";\")\r\n",
					"      }.toMap\r\n",
					"  }"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Function of timestamp convert fields to cosmosdb\r\n",
					"  def timestampFieldsConvert(df: DataFrame, str: String): DataFrame={\r\n",
					"    if (str == \"fotografia_divisao\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_fotografia\",\r\n",
					"        to_timestamp(col(\"dtc_fotografia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_fotografia\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"autor\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_inicio\",\r\n",
					"        to_timestamp(col(\"dtc_inicio\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_inicio\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"feriado\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_feriado\",\r\n",
					"        to_timestamp(col(\"dtc_feriado\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_feriado\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"calendario_monetario\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_inicial\",\r\n",
					"        to_timestamp(col(\"dtc_inicial\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_inicial\"))\r\n",
					"        .withColumn(\"dtc_final\",\r\n",
					"          to_timestamp(col(\"dtc_final\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_final\"))\r\n",
					"        .withColumn(\"dtc_limite_foto\",\r\n",
					"          to_timestamp(col(\"dtc_limite_foto\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_limite_foto\"))\r\n",
					"        .withColumn(\"dtc_cadastro\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"escritorio_contratado_sap\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"fotografia_modulo\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_fotografia\",\r\n",
					"        to_timestamp(col(\"dtc_fotografia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_fotografia\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"fotografia_item_reu\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"fotografia_item\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_arquivamento\",\r\n",
					"          to_timestamp(col(\"dtc_arquivamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_arquivamento\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"        .withColumn(\"dtc_citacao\",\r\n",
					"          to_timestamp(col(\"dtc_citacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_citacao\"))\r\n",
					"        .withColumn(\"dtc_cadastro_processo\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro_processo\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro_processo\"))\r\n",
					"        .withColumn(\"dtc_protocolo_aforamento\",\r\n",
					"          to_timestamp(col(\"dtc_protocolo_aforamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_protocolo_aforamento\"))\r\n",
					"        .withColumn(\"dtc_distribuicao\",\r\n",
					"          to_timestamp(col(\"dtc_distribuicao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_distribuicao\"))\r\n",
					"        .withColumn(\"log_dtc_citacao\",\r\n",
					"          to_timestamp(col(\"log_dtc_citacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"log_dtc_citacao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"bkp_fotografia_item\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_arquivamento\",\r\n",
					"          to_timestamp(col(\"dtc_arquivamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_arquivamento\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"        .withColumn(\"dtc_citacao\",\r\n",
					"          to_timestamp(col(\"dtc_citacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_citacao\"))\r\n",
					"        .withColumn(\"dtc_cadastro_processo\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro_processo\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro_processo\"))\r\n",
					"        .withColumn(\"dtc_protocolo_aforamento\",\r\n",
					"          to_timestamp(col(\"dtc_protocolo_aforamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_protocolo_aforamento\"))\r\n",
					"        .withColumn(\"dtc_backup\",\r\n",
					"          to_timestamp(col(\"dtc_backup\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_backup\"))\r\n",
					"        .withColumn(\"dtc_distribuicao\",\r\n",
					"          to_timestamp(col(\"dtc_distribuicao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_distribuicao\"))\r\n",
					"        .withColumn(\"log_dtc_citacao\",\r\n",
					"          to_timestamp(col(\"log_dtc_citacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"log_dtc_citacao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"fotografia\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_data_fotografia\",\r\n",
					"          to_timestamp(col(\"dtc_data_fotografia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_data_fotografia\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"funcionario\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_recisao\",\r\n",
					"        to_timestamp(col(\"dtc_recisao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_recisao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"ocorrencia\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_publicacao\",\r\n",
					"          to_timestamp(col(\"dtc_publicacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_publicacao\"))\r\n",
					"        .withColumn(\"dtc_prazo_audiencia\",\r\n",
					"          to_timestamp(col(\"dtc_prazo_audiencia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_prazo_audiencia\"))\r\n",
					"        .withColumn(\"dtc_conclusao\",\r\n",
					"          to_timestamp(col(\"dtc_conclusao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_conclusao\"))\r\n",
					"        .withColumn(\"dtc_protocolo\",\r\n",
					"          to_timestamp(col(\"dtc_protocolo\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_protocolo\"))\r\n",
					"        .withColumn(\"dtc_prazo\",\r\n",
					"          to_timestamp(col(\"dtc_prazo\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_prazo\"))\r\n",
					"        .withColumn(\"dtc_ocorrencia\",\r\n",
					"          to_timestamp(col(\"dtc_ocorrencia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_ocorrencia\"))\r\n",
					"        .withColumn(\"dtc_doc_sap\",\r\n",
					"          to_timestamp(col(\"dtc_doc_sap\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_doc_sap\"))\r\n",
					"        .withColumn(\"dtc_pagamento\",\r\n",
					"          to_timestamp(col(\"dtc_pagamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_pagamento\"))\r\n",
					"        .withColumn(\"dtc_geracao_sap\",\r\n",
					"          to_timestamp(col(\"dtc_geracao_sap\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_geracao_sap\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"parametro\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_inicio_mask\",\r\n",
					"        to_timestamp(col(\"dtc_inicio_mask\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_inicio_mask\"))\r\n",
					"        .withColumn(\"dtc_inicio_spn\",\r\n",
					"          to_timestamp(col(\"dtc_inicio_spn\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_inicio_spn\"))\r\n",
					"        .withColumn(\"tempo_apaga_consolidacao\",\r\n",
					"          to_timestamp(col(\"tempo_apaga_consolidacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"tempo_apaga_consolidacao\"))\r\n",
					"        .withColumn(\"dtc_inicio_pesquisa_vigia\",\r\n",
					"          to_timestamp(col(\"dtc_inicio_pesquisa_vigia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_inicio_pesquisa_vigia\"))\r\n",
					"        .withColumn(\"dtc_fim_pesquisa_vigia\",\r\n",
					"          to_timestamp(col(\"dtc_fim_pesquisa_vigia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim_pesquisa_vigia\"))\r\n",
					"        .withColumn(\"dtc_inicio_polo_ativo\",\r\n",
					"          to_timestamp(col(\"dtc_inicio_polo_ativo\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_inicio_polo_ativo\"))\r\n",
					"        .withColumn(\"dtc_programacao_fotografia\",\r\n",
					"          to_timestamp(col(\"dtc_programacao_fotografia\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_programacao_fotografia\"))\r\n",
					"        .withColumn(\"dtc_migracao_benner\",\r\n",
					"          to_timestamp(col(\"dtc_migracao_benner\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_migracao_benner\"))\r\n",
					"        .withColumn(\"dtc_corte\",\r\n",
					"          to_timestamp(col(\"dtc_corte\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_corte\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"prestacao_contas_form\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_status_atual\",\r\n",
					"        to_timestamp(col(\"dtc_status_atual\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_status_atual\"))\r\n",
					"        .withColumn(\"dtc_cadastro\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_atribuicao_responsavel\",\r\n",
					"          to_timestamp(col(\"dtc_atribuicao_responsavel\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_atribuicao_responsavel\"))\r\n",
					"        .withColumn(\"dtc_credito\",\r\n",
					"          to_timestamp(col(\"dtc_credito\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_credito\"))\r\n",
					"        .withColumn(\"dtc_compensacao\",\r\n",
					"          to_timestamp(col(\"dtc_compensacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_compensacao\"))\r\n",
					"        .withColumn(\"dtc_validacao\",\r\n",
					"          to_timestamp(col(\"dtc_validacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_validacao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"prestacao_contas\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_compensacao\",\r\n",
					"        to_timestamp(col(\"dtc_compensacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_compensacao\"))\r\n",
					"        .withColumn(\"dtc_doc_sap\",\r\n",
					"          to_timestamp(col(\"dtc_doc_sap\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_doc_sap\"))\r\n",
					"        .withColumn(\"dtc_prestacao\",\r\n",
					"          to_timestamp(col(\"dtc_prestacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_prestacao\"))\r\n",
					"        .withColumn(\"dtc_enviado_contabilidade\",\r\n",
					"          to_timestamp(col(\"dtc_enviado_contabilidade\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_enviado_contabilidade\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"processo_pedido_processo\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"processo\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_citacao\",\r\n",
					"          to_timestamp(col(\"dtc_citacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_citacao\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"        .withColumn(\"dtc_arquivamento\",\r\n",
					"          to_timestamp(col(\"dtc_arquivamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_arquivamento\"))\r\n",
					"        .withColumn(\"dtc_envio_escritorio_externo\",\r\n",
					"          to_timestamp(col(\"dtc_envio_escritorio_externo\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_envio_escritorio_externo\"))\r\n",
					"        .withColumn(\"dtc_lavratura\",\r\n",
					"          to_timestamp(col(\"dtc_lavratura\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_lavratura\"))\r\n",
					"        .withColumn(\"dtc_protocolo_aforamento\",\r\n",
					"          to_timestamp(col(\"dtc_protocolo_aforamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_protocolo_aforamento\"))\r\n",
					"        .withColumn(\"data_original\",\r\n",
					"          to_timestamp(col(\"data_original\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"data_original\"))\r\n",
					"        .withColumn(\"dtc_ano_saldo_oper\",\r\n",
					"          to_timestamp(col(\"dtc_ano_saldo_oper\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_ano_saldo_oper\"))\r\n",
					"        .withColumn(\"dtc_distribuicao\",\r\n",
					"          to_timestamp(col(\"dtc_distribuicao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_distribuicao\"))\r\n",
					"        .withColumn(\"log_dtc_citacao\",\r\n",
					"          to_timestamp(col(\"log_dtc_citacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"log_dtc_citacao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"prog_rel_andament_penhor_on\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dt_criacao\",\r\n",
					"        to_timestamp(col(\"dt_criacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dt_criacao\"))\r\n",
					"        .withColumn(\"dt_solicitacao\",\r\n",
					"          to_timestamp(col(\"dt_solicitacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_solicitacao\"))\r\n",
					"        .withColumn(\"dt_inicial\",\r\n",
					"          to_timestamp(col(\"dt_inicial\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_inicial\"))\r\n",
					"        .withColumn(\"dt_final\",\r\n",
					"          to_timestamp(col(\"dt_final\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_final\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"prog_rel_prestacao_conta\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dt_cadastro_emissao\",\r\n",
					"        to_timestamp(col(\"dt_cadastro_emissao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dt_cadastro_emissao\"))\r\n",
					"        .withColumn(\"dt_criacao\",\r\n",
					"          to_timestamp(col(\"dt_criacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_criacao\"))\r\n",
					"        .withColumn(\"dt_solicitacao\",\r\n",
					"          to_timestamp(col(\"dt_solicitacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_solicitacao\"))\r\n",
					"        .withColumn(\"dt_inicial\",\r\n",
					"          to_timestamp(col(\"dt_inicial\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_inicial\"))\r\n",
					"        .withColumn(\"dt_final\",\r\n",
					"          to_timestamp(col(\"dt_final\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_final\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"prog_rel_reclassi_penhor_on\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dt_criacao\",\r\n",
					"        to_timestamp(col(\"dt_criacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dt_criacao\"))\r\n",
					"        .withColumn(\"dt_solicitacao\",\r\n",
					"          to_timestamp(col(\"dt_solicitacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_solicitacao\"))\r\n",
					"        .withColumn(\"dt_inicial\",\r\n",
					"          to_timestamp(col(\"dt_inicial\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_inicial\"))\r\n",
					"        .withColumn(\"dt_final\",\r\n",
					"          to_timestamp(col(\"dt_final\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_final\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"prog_relatorio_acomp_prazo\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dt_criacao\",\r\n",
					"        to_timestamp(col(\"dt_criacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dt_criacao\"))\r\n",
					"        .withColumn(\"dt_solicitacao\",\r\n",
					"          to_timestamp(col(\"dt_solicitacao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dt_solicitacao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"reavaliacao\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"reu\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_inicio\",\r\n",
					"        to_timestamp(col(\"dtc_inicio\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_inicio\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"status_ocorrencia_processo\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_cadastro\",\r\n",
					"        to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_cadastro\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"terceiro_interessado\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_inicio\",\r\n",
					"        to_timestamp(col(\"dtc_inicio\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_inicio\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"usuario\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_troca_senha\",\r\n",
					"        to_timestamp(col(\"dtc_troca_senha\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_troca_senha\"))\r\n",
					"        .withColumn(\"dtc_cadastro\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_ultimo_acesso\",\r\n",
					"          to_timestamp(col(\"dtc_ultimo_acesso\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_ultimo_acesso\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"valor_data_processo\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_pagamento\",\r\n",
					"        to_timestamp(col(\"dtc_pagamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_pagamento\"))\r\n",
					"        .withColumn(\"dtc_expedicao\",\r\n",
					"          to_timestamp(col(\"dtc_expedicao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_expedicao\"))\r\n",
					"        .withColumn(\"dtc_validade\",\r\n",
					"          to_timestamp(col(\"dtc_validade\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_validade\"))\r\n",
					"        .withColumn(\"dtc_mudanca_aproveitamento\",\r\n",
					"          to_timestamp(col(\"dtc_mudanca_aproveitamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_mudanca_aproveitamento\"))\r\n",
					"        .withColumn(\"dtc_cadastro\",\r\n",
					"          to_timestamp(col(\"dtc_cadastro\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_cadastro\"))\r\n",
					"        .withColumn(\"dtc_aproveitamento\",\r\n",
					"          to_timestamp(col(\"dtc_aproveitamento\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_aproveitamento\"))\r\n",
					"        .withColumn(\"dat_ultima_alteracao\",\r\n",
					"          to_timestamp(col(\"dat_ultima_alteracao\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dat_ultima_alteracao\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"vitima\") {\r\n",
					"      println(\"Executing transformation to timestamp\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"dtc_inicio\",\r\n",
					"        to_timestamp(col(\"dtc_inicio\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"dtc_inicio\"))\r\n",
					"        .withColumn(\"dtc_fim\",\r\n",
					"          to_timestamp(col(\"dtc_fim\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"dtc_fim\"))\r\n",
					"      return dfFromRDD2\r\n",
					"    }\r\n",
					"    val dfFromRDD2 = df\r\n",
					"    dfFromRDD2\r\n",
					"  }"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  // Function convert columns updated_at and created_at\r\n",
					"  def convertCreatedUpdated(df: DataFrame): DataFrame={\r\n",
					"      val dfFromRDD2 = df.withColumn(\"created_at\",\r\n",
					"        to_timestamp(col(\"created_at\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"          .cast(\"String\")\r\n",
					"          .as(\"created_at\"))\r\n",
					"        .withColumn(\"updated_at\",\r\n",
					"          to_timestamp(col(\"updated_at\"),\"yyyy-MM-dd HH mm ss\")\r\n",
					"            .cast(\"String\")\r\n",
					"            .as(\"updated_at\"))\r\n",
					"      dfFromRDD2\r\n",
					"    }"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  // Function of Read Multiples Events\r\n",
					"  def MultiplesTables(str: String): List[String] = {\r\n",
					"    val tableArray = str.split(\",\").toList\r\n",
					"    tableArray\r\n",
					"  }"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Multiple Topics\r\n",
					"\r\n",
					"val tables: String = TokenLibrary.getSecret(akv, \"tables\")\r\n",
					"val tableList: List[String] = MultiplesTables(tables)\r\n",
					"\r\n",
					"\r\n",
					"// Get Database\r\n",
					"val stringDB: String = TokenLibrary.getSecret(akv, secret=\"database\")\r\n",
					"val valuesDB: Map[String, String] = strToMap(stringDB)\r\n",
					"val database = valuesDB(\"databaseB\")\r\n",
					"\r\n",
					"// Get Linked Service Name (Synapse x CosmosDb)\r\n",
					"val CosmosDbLinkedName: String = TokenLibrary.getSecret(akv, secret=\"CosmosDbLinkedName\")\r\n",
					"\r\n",
					"// Get New Column Name for PK from Key Vault\r\n",
					"val newColumnNamePK: String = TokenLibrary.getSecret(akv, \"newColumnNamePK\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  // Function replace\r\n",
					"  def alterNewPk(df: DataFrame): DataFrame = {\r\n",
					"        println(\"Removing special characters from id column\")\r\n",
					"      val dfFromRDD2 = df.withColumn(newColumnNamePK,\r\n",
					"        regexp_replace(df(newColumnNamePK), \"^[0]|[/_-]\", \"\"))\r\n",
					"      dfFromRDD2\r\n",
					"  }"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  // Function alter id column\r\n",
					"  def alterIdColumn(df: DataFrame): DataFrame = {\r\n",
					"      println(\"Renaming newpk column to id\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"id\",\r\n",
					"        col(newColumnNamePK))\r\n",
					"        .drop(newColumnNamePK)\r\n",
					"      dfFromRDD2\r\n",
					"    }"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"  // Function when and then convert field created_by p1 to p3\r\n",
					"  def convertColumnP3(df: DataFrame, str: String, env: String): DataFrame={\r\n",
					"    if (str == \"calendario_monetario\" && env == \"dev\") {\r\n",
					"      println(\"Executing transformation P1 to P3 for created_by in DEV environment\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"created_by\",\r\n",
					"        when(col(\"cod_calendario_monetario\") >= 160,\r\n",
					"          \"p3\")\r\n",
					"          .otherwise(col(\"created_by\")))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"calendario_monetario\" && env == \"test\") {\r\n",
					"      println(\"Executing transformation P1 to P3 for created_by in TEST environment\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"created_by\",\r\n",
					"        when(col(\"cod_calendario_monetario\") >= 155,\r\n",
					"          \"p3\")\r\n",
					"          .otherwise(col(\"created_by\")))\r\n",
					"      return dfFromRDD2\r\n",
					"    } else if (str == \"calendario_monetario\" && env == \"prod\") {\r\n",
					"      println(\"Executing transformation P1 to P3 for created_by in PROD environment\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"created_by\",\r\n",
					"        when(col(\"cod_calendario_monetario\") >= 163,\r\n",
					"          \"p3\")\r\n",
					"          .otherwise(col(\"created_by\")))\r\n",
					"      return dfFromRDD2\r\n",
					"    }\r\n",
					"    val dfFromRDD2 = df\r\n",
					"    dfFromRDD2\r\n",
					"  }"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Function New Columns in Processo Collection\r\n",
					"  def newColumnsProcessoCollection(df: DataFrame, str: String): DataFrame={\r\n",
					"    if (str == \"processo\") {\r\n",
					"      println(\"Creating new columns on Processo Collection\")\r\n",
					"      val dfFromRDD2 = df.withColumn(\"avaliacao_risco\",\r\n",
					"       lit(\"REMOTO\"))\r\n",
					"                         .withColumn(\"indice_correcao_monetaria_padrao\",\r\n",
					"       lit(true))\r\n",
					"                         .withColumn(\"index_custom_name\",\r\n",
					"       lit(null))\r\n",
					"                         .withColumn(\"taxa_juros_padrao\",\r\n",
					"       lit(true))\r\n",
					"                         .withColumn(\"index_custom_fees\",\r\n",
					"       lit(null))\r\n",
					"      return dfFromRDD2\r\n",
					"    }\r\n",
					"    val dfFromRDD2 = df\r\n",
					"    dfFromRDD2\r\n",
					"  }"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"        val eventHubName = \"calendario_monetario\"\r\n",
					"        val environment = \"prod\"\r\n",
					"        val checkPointCosmos: String = s\"${TokenLibrary.getSecret(akv, secret=\"checkPointCosmos\")}$eventHubName\"\r\n",
					"        val tableSourceName = s\"$database.$eventHubName\"\r\n",
					"\r\n",
					"        val cosmosEndpoint: String = TokenLibrary.getSecret(akv, secret=\"cosmosEndpoint\")\r\n",
					"        val cosmosMasterKey: String = TokenLibrary.getSecret(akv, secret=\"cosmosMasterKey\")\r\n",
					"        val cosmosDatabaseName: String = TokenLibrary.getSecret(akv, secret=\"cosmosDatabaseName\")\r\n",
					"        val cosmosContainerName = eventHubName\r\n",
					"\r\n",
					"        val cfg = Map(\r\n",
					"        \"spark.cosmos.accountEndpoint\" -> cosmosEndpoint,\r\n",
					"        \"spark.cosmos.accountKey\" -> cosmosMasterKey,\r\n",
					"        \"spark.cosmos.database\" -> cosmosDatabaseName,\r\n",
					"        \"spark.cosmos.container\" -> cosmosContainerName,\r\n",
					"        \"checkpointLocation\" -> checkPointCosmos,\r\n",
					"        \"spark.cosmos.write.strategy\" -> \"ItemOverwrite\"\r\n",
					"        )\r\n",
					"\r\n",
					"        \r\n",
					"        /*\r\n",
					"        val checkPointCosmos = s\"${\r\n",
					"          configurationClient\r\n",
					"            .getConfigurationSetting(\"checkPointCosmos\", null)\r\n",
					"            .getValue\r\n",
					"        }$table\"\r\n",
					"        */\r\n",
					"\r\n",
					"        println(s\"reading table: $eventHubName\")\r\n",
					"\r\n",
					"        val workStreamTable = spark.readStream\r\n",
					"          .format(source=\"delta\")\r\n",
					"          .option(\"ignoreChanges\", \"true\")\r\n",
					"          .table(tableSourceName)\r\n",
					"\r\n",
					"        // Call function alterNewPk\r\n",
					"        val columnModified = alterNewPk(workStreamTable)\r\n",
					"\r\n",
					"        // Call function alterIdColumn\r\n",
					"        val newSchema = alterIdColumn(columnModified)\r\n",
					"\r\n",
					"        // Call function convertCreatedUpdated\r\n",
					"        val covertCreatedUpdated = convertCreatedUpdated(newSchema)\r\n",
					"\r\n",
					"        // Call function timestampFieldsConvert\r\n",
					"        val convertedAllFields = timestampFieldsConvert(covertCreatedUpdated, eventHubName)\r\n",
					"\r\n",
					"        // Call function convertedP3\r\n",
					"        val convertedP3 = convertColumnP3(convertedAllFields, eventHubName, environment)\r\n",
					"\r\n",
					"        // Call function newColumns\r\n",
					"        val newColumns = newColumnsProcessoCollection(convertedP3, eventHubName)\r\n",
					"\r\n",
					"\r\n",
					"        val wst = newColumns\r\n",
					"            .writeStream\r\n",
					"            .format(\"cosmos.oltp\")\r\n",
					"            .queryName(eventHubName)\r\n",
					"            .options(cfg)\r\n",
					"            .outputMode(outputMode=\"append\")\r\n",
					"            .start()\r\n",
					"            .awaitTermination()\r\n",
					"\r\n",
					"        println(s\"executing query: $wst and writing table: $eventHubName\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}