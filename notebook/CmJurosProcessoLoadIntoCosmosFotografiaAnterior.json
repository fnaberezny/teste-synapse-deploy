{
	"name": "CmJurosProcessoLoadIntoCosmosFotografiaAnterior",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synspjarvisprd",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f45e313c-45cb-4d23-8b78-e2581bdc0c94"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/71cc41f4-8e37-4c60-abbb-b9003b91c554/resourceGroups/rg-jarvis-production/providers/Microsoft.Synapse/workspaces/syn-tlf-jarvis-prod/bigDataPools/synspjarvisprd",
				"name": "synspjarvisprd",
				"type": "Spark",
				"endpoint": "https://syn-tlf-jarvis-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synspjarvisprd",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cod_calendario_monetario_anterior = spark.sql(f'''\r\n",
					"    select max(cod_calendario_monetario) cod_calendario_monetario_anterior\r\n",
					"      from Silver.calendario_monetario_p3\r\n",
					"     where cod_calendario_monetario < (select cod_calendario_monetario\r\n",
					"                                         from Silver.calendario_monetario_p3\r\n",
					"                                        where sts_ativo = 1\r\n",
					"    )''').first()[\"cod_calendario_monetario_anterior\"]"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"env = mssparkutils.env.getWorkspaceName()\r\n",
					"if(env == 'syn-tlf-jarvis-prod'):\r\n",
					"    sqlWorkspaceName = \"syndpjarvisprod\"\r\n",
					"elif(env == 'syn-tlf-jarvis-test'):\r\n",
					"    sqlWorkspaceName = 'syndpjarvistest'\r\n",
					"else:\r\n",
					"    sqlWorkspaceName = 'syndpjarvisdev'\r\n",
					"\r\n",
					"# cosmosdb variables\r\n",
					"linkedService = 'CosmosDb'\r\n",
					"containerTarget = 'fotografia_anterior'\r\n",
					"\r\n",
					"# sql variables\r\n",
					"view = \"vw_carga_projecao\"\r\n",
					"\r\n",
					"# read from sql dedicated pool\r\n",
					"vw_carga_projecao = spark.read.synapsesql(f'{sqlWorkspaceName}.rl3.{view}').where(\"cod_calendario_monetario = {cod_calendario_monetario_anterior}\")\r\n",
					"columnRenamed = vw_carga_projecao.withColumnRenamed(\"carta_fianÃ§a\", \"carta_fianca\")\r\n",
					"columnRenamed.createOrReplaceTempView(\"view\")\r\n",
					"\r\n",
					"carga_inicial_cm_juros_processo = spark.read.synapsesql(f'{sqlWorkspaceName}.dbo.carga_inicial_cm_juros_processo')\r\n",
					"carga_inicial_cm_juros_processo.createOrReplaceTempView(\"cmjp\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(f'''\r\n",
					"  select id\r\n",
					"       , sequencial as num_processo\r\n",
					"       , cod_calendario_monetario\r\n",
					"       , prov_cp_op_final\r\n",
					"       , prov_lp_op_final\r\n",
					"       , prov_cp_lp_op_final\r\n",
					"       , possivel_op_final\r\n",
					"       , remoto_op_final\r\n",
					"       , valor_total_risco_op\r\n",
					"       , bx_prov_por_pgto_acumulada_op\r\n",
					"       , bx_por_reversao_acumulada_op\r\n",
					"       , valor_total_envolvido_op\r\n",
					"       , prov_cp_cm_final\r\n",
					"       , prov_lp_cm_final\r\n",
					"       , prov_cp_lp_cm_final\r\n",
					"       , possivel_cm_final\r\n",
					"       , remoto_cm_final\r\n",
					"       , valor_total_risco_cm\r\n",
					"       , bx_de_prov_por_pgto_acumulada_cm\r\n",
					"       , bx_por_reversao_acumulada_cm\r\n",
					"       , valor_total_envolvido_cm\r\n",
					"       , prov_cp_juros_final\r\n",
					"       , prov_lp_juros_final\r\n",
					"       , prov_cp_lp_juros_final\r\n",
					"       , possivel_juros_final\r\n",
					"       , remoto_juros_final\r\n",
					"       , valor_total_risco_juros\r\n",
					"       , bx_de_prov_por_pgto_acumulada_juros\r\n",
					"       , bx_por_reversao_acumulada_juros\r\n",
					"       , valor_total_envolvido_juros\r\n",
					"       , prov_cp_fi_final\r\n",
					"       , prov_lp_fi_final\r\n",
					"       , prov_cp_lp_fi_final\r\n",
					"       , possivel_fi_final as total_possivel_fi\r\n",
					"       , remoto_fi_final\r\n",
					"       , valor_total_risco_fi\r\n",
					"       , bx_de_prov_por_pgto_acumulada_fi\r\n",
					"       , bx_por_reversao_acumulada_fi\r\n",
					"       , valor_total_envolvido_fi\r\n",
					"       , prov_cp_op_fi_final\r\n",
					"       , prov_lp_op_fi_final\r\n",
					"       , prov_cp_lp_op_fi_final\r\n",
					"       , possivel_op_fi_final\r\n",
					"       , remoto_op_fi_final\r\n",
					"       , valor_total_risco_op_fi\r\n",
					"       , bx_de_prov_por_pgto_acumulada_op_fi\r\n",
					"       , bx_por_reversao_acumulada_op_fi\r\n",
					"       , valor_total_envolvido_op_fi\r\n",
					"    from view\r\n",
					"   where sequencial in (select sequencial from cmjp)\r\n",
					"''')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# df.count()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# write to cosmosdb on fotografia_anterior - \"ItemOverwrite\" strategy mode\r\n",
					"(\r\n",
					"df\r\n",
					"    .write\r\n",
					"    .format(\"cosmos.oltp\")\r\n",
					"    .option(\"spark.synapse.linkedService\", linkedService)\r\n",
					"    .option(\"spark.cosmos.container\", containerTarget)\r\n",
					"    .option(\"spark.cosmos.write.strategy\", \"ItemOverwrite\")\r\n",
					"    .option(\"spark.cosmos.write.bulk.enabled\", \"true\")\r\n",
					"    .mode(\"append\")\r\n",
					"    .save()\r\n",
					")"
				]
			}
		]
	}
}